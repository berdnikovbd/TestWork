function onSumbit() {
    let div = document.getElementById("outputForm");
    let form = div?.children[0];
    let postMessage = form?.attributes["postmessage"];

    if (postMessage != null) {
        let postMessageDiv = document.getElementById("postmessage");
        alert(postMessage.value);
    }
}

function fileInput(input) {
    let file = input.files[0];
    let reader = new FileReader();
  
    reader.readAsText(file);
  
    reader.onload = function() {
        let json = JSON.parse(reader.result);
        let form = parseForm(json.form);
        let outputForm = document.getElementById("outputForm");

        // Для простоты вывожу демонстрации вывожу просто alert'ом .
        form.addEventListener("submit", () => {
            let postMessage = form?.attributes["postmessage"];

            if (postMessage != null) {
                onSumbit();
            }
        });

        outputForm.innerHTML = null;
        outputForm.appendChild(form);

        let formHTMLElement = outputForm.children.item(0);

        json.form.items.forEach(element => {
            let htmlElement = parseElement(element);


            if (htmlElement != null) {
                let divElement = document.createElement("div");

                fillElementId(divElement, prefixElementId + elementIdFiller++);

                if (element.label != null) {
                    let label = document.createElement("label");

                    fillElementId(label, prefixElementId + elementIdFiller++);
                    label.innerHTML = element.label;

                    label.appendChild(htmlElement);
                    divElement.appendChild(label);
                } else {
                    divElement.appendChild(htmlElement);
                }

                formHTMLElement.appendChild(divElement);
            }
        });
    };
  
    reader.onerror = function() {
      console.log(reader.error);
    };
}

const prefixElementId = "autoGenerated";
let elementIdFiller = 0;

function parseForm(jsonForm) {
    let form = document.createElement("form");
    fillElementId(form, prefixElementId + elementIdFiller++);
    fillFormAttributes(form, jsonForm);

    return form;
}
function fillFormAttributes(htmlElement, jsonForm) {
    let attributes = ["postmessage", "name"];
    fillAttributes(htmlElement, jsonForm, attributes);
}

function parseElement(elementJson) {
    if (elementJson.type === "filler") {
        return parseFiller(elementJson)
    }
    else if (elementJson.type === "text") {
        return parseTextElement(elementJson)
    }
    else if (elementJson.type === "textarea") {
        return parseTextAreaElement(elementJson)
    }
    else if (elementJson.type === "checkbox") {
        return parseCheckbox(elementJson)
    }
    else if (elementJson.type === "button") {
        return parseButton(elementJson)
    }
    else if (elementJson.type === "select") {
        return parseSelect(elementJson)
    }
    else if (elementJson.type === "radio") {
        return parseRadio(elementJson)
    }
}
function parseFiller(fillerJson) {
    let filler = document.createElement("div");

    fillElementId(filler, prefixElementId + elementIdFiller++);
    fillFillerAttiributes(filler, fillerJson);

    if (fillerJson.message != null) {
        filler.innerHTML = fillerJson.message;
    }

    return filler;
}

function  fillFillerAttiributes(htmlElement, elementJson) {
    const extraAttributes = [];

    fillAttributes(htmlElement, elementJson, extraAttributes);
}

function parseTextElement(textElementJson) {
    let textElement = document.createElement("input");

    fillElementId(textElement, prefixElementId + elementIdFiller++);
    fillTextElementAttributes(textElement, textElementJson);

    return textElement;
}

function  fillTextElementAttributes(htmlElement, elementJson) {
    const extraAttributes = ["value"];

    fillElementDefaultAttributes(htmlElement, elementJson);
    fillAttributes(htmlElement, elementJson, extraAttributes);
}

function parseTextAreaElement(textElementJson) {
    let textElement = document.createElement("textarea");

    fillElementId(textElement, prefixElementId + elementIdFiller++);
    fillTextAreaAttributes(textElement, textElementJson);

    return textElement;
}

function  fillTextAreaAttributes(htmlElement, elementJson) {
    let extraAttributes = [];

    fillElementDefaultAttributes(htmlElement, elementJson);
    fillTextElementAttributes(htmlElement, elementJson);
    fillAttributes(htmlElement, elementJson, extraAttributes);
}

function parseCheckbox(checkboxJson) {
    let checkBox = document.createElement("input");

    fillElementId(checkBox, prefixElementId + elementIdFiller++);
    fillElementDefaultAttributes(checkBox, checkboxJson);
    fillCheckboxAttributes(checkBox, checkboxJson);

    return checkBox;
}

function  fillCheckboxAttributes(htmlElement, elementJson) {
    const attributes = [ "checked"];

    fillFormAttributes(htmlElement, elementJson, attributes);
}

function parseButton(radioJson) {
    let button = document.createElement("button");

    fillElementId(button, prefixElementId + elementIdFiller++);

    if (radioJson.text != null) {
        button.innerHTML = radioJson.text;
    }

    return button;
}

function parseSelect(selectJson) {
    let selectElement = document.createElement("select");

    fillElementId(selectElement, prefixElementId + elementIdFiller++);
    fillSelectAttributes(selectElement, selectJson);

    if (selectJson.options == null) {
        return  selectElement;
    }

    if (selectJson.options.length == null) {
        selectElement.appendChild(parseSelectOptionElement(selectJson.options));
    } else {
        selectJson.options.forEach(optionJson => {
            selectElement.appendChild(parseSelectOptionElement(optionJson));
        });
    }

    return selectElement;
}

function  fillSelectAttributes(htmlElement, elementJson) {
    const extraAttributes = [];

    fillTextElementAttributes(htmlElement, elementJson);
    fillAttributes(htmlElement, elementJson, extraAttributes);
}

function parseSelectOptionElement(elementJson) {
    let option = document.createElement("option");

    fillElementId(option, prefixElementId + elementIdFiller++);
    fillSelectOptionElement(option, elementJson);

    if (elementJson.text != null) {
        option.innerHTML = elementJson.text;
    }

    return option;
}
function fillSelectOptionElement(htmlElement, elementJson) {
    const attributes = [ "value", "checked"];

    fillAttributes(htmlElement, elementJson, attributes);
}

function parseRadio(radioJson) {
    let divElement = document.createElement("div");

    fillElementId(divElement, prefixElementId + elementIdFiller++);

    if (radioJson.validationRules != null) {
        if (radioJson.validationRules.length != null) {
            radioJson.validationRules.forEach(rule => {
                if (rule.type === "radio") {
                    fillAttribute(divElement, "parentValidateRadio", "");
                }
            })
        } else {
            if (radioJson.validationRules.type === "radio") {
                fillAttribute(divElement, "parentValidateRadio", "");
            }
        }
    }

    if (radioJson.items == null) {
        return divElement;
    }

    if (radioJson.items.length == null) {
        let radioElement = document.createElement("input");
        radioElement.appendChild(parseRadioElement(radioJson.items, radioJson));
        divElement.appendChild(radioElement);

    } else {
        radioJson.items.forEach(optionJson => {
            let radioElement = parseRadioElement(optionJson, radioJson);
            divElement.appendChild(radioElement);
        });
    }

    return divElement;
}

function  fillRadioElementAttributes(htmlElement, elementJson) {
    const attributes = [ ];

    fillTextAreaAttributes(htmlElement, elementJson);
    fillAttributes(htmlElement, elementJson, attributes);
    fillValidationRules(htmlElement, elementJson.validationRules);
}

function parseRadioElement(elementJson, parentJson) {
    const attributes = [ "value", "checked"];

    let htmlElement = document.createElement("input");
    let label = document.createElement("label");

    fillElementId(label, prefixElementId + elementIdFiller++);
    fillElementId(htmlElement, prefixElementId + elementIdFiller++);
    fillAttributes(htmlElement, elementJson, attributes);
    fillRadioElementAttributes(htmlElement, parentJson);

    if (elementJson.label == null) {
        return htmlElement;
    }

    label.innerHTML = elementJson.label;
    label.appendChild(htmlElement);

    return label;
}
function fillElementDefaultAttributes(htmlElement, jsonElement) {
    const attributes = [ "name", "placeholder", "required", "type"];

    addHTMLElementClass(htmlElement, jsonElement.class);
    fillAttributes(htmlElement, jsonElement , attributes);
    fillValidationRules(htmlElement, jsonElement.validationRules);
}

function fillAttributes(htmlElement, jsonElement, attributesList) {
    attributesList.forEach(attribute => {
        fillAttribute(htmlElement, attribute, jsonElement[attribute]);
    })
}

function fillAttribute(htmlElement, attributeName, value) {
    if (attributeName == null) {
        return;
    }

    if (attributeName === "required") {
        if (value === true) {
            htmlElement.setAttribute("required", '');
        }

        return;
    }

    if (value == null) {
        return;
    }

    htmlElement.setAttribute(attributeName, value);
}
function addHTMLElementClass(htmlElement, className) {
    let attribute = htmlElement.attributes["class"];

    if (attribute != null) {
        attribute.value += " " + className;
        return;
    }

    if (className == null || className === "") {
            className = " ";
    }

    fillAttribute(htmlElement, "class", className);
}

function fillElementId(htmlElement, id) {
    htmlElement.id = id;
}
function fillValidationRules(htmlElement, jsonValidationRules) {
    if (jsonValidationRules == null) {
        return;
    }

    let isCreated = htmlElement.attributes["validationRules"] != null;

    if (jsonValidationRules.length == null)
    {
        fillAttribute(htmlElement, "validationRules", jsonValidationRules.type);
        fillValidationAttributes(htmlElement, jsonValidationRules.type);
        return;
    }

    jsonValidationRules.forEach(rule => {
        if (!isCreated) {
            fillAttribute(htmlElement, "validationRules", rule.type);
            isCreated = true;
        } else {
            let validationRulesAttribute = htmlElement.getAttribute("validationRules");
            fillValidationAttributes(htmlElement, rule);
            fillAttribute(htmlElement, "validationRules", validationRulesAttribute + " " + rule.type);
        }
    });
}

function fillValidationAttributes(htmlElement, validationRuleType) {
    if (validationRuleType == null) {
        return;
    }

    let pattern = null;
    let title = null;
    if (validationRuleType === "text") {
        pattern = "*";
        title = "Должен быть любой текст"
    } else if (validationRuleType === "tel") {
        pattern = "8[0-9]{10}";
        title = "Телефон должен быть формата 8xxxxxxxxxx, где вместо х должна быть цифра";
    } else  if (validationRuleType === "email") {
        pattern = "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$";
        title = "Email должен быть формата dev@directum.ru";
    }

    if (pattern != null) {
        fillAttribute(htmlElement, "pattern", pattern);
    }

    if (title != null) {
        fillAttribute(htmlElement, "title", title);
    }
}
